# –ê—É–¥—ñ–æ –†–µ–∫–æ—Ä–¥–µ—Ä —Ç–∞ –†–µ–¥–∞–∫—Ç–æ—Ä v1.0.4 –¥–ª—è Replit
# –ó–∞–ø—É—Å–∫: python audio_editor_replit.py

import os
import sys
import numpy as np
import tempfile
from pydub import AudioSegment, effects
from pydub.silence import detect_nonsilent
import noisereduce as nr
from scipy.signal import butter, lfilter
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –î–ª—è Replit

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä—ñ–∑–∫–∏ —Ç–∏—à—ñ
def trim_silence(audio, silence_thresh=-40, min_silence_len=100):
    nonsilent = detect_nonsilent(audio, min_silence_len=min_silence_len, silence_thresh=silence_thresh)
    if not nonsilent:
        return audio
    start_trim = nonsilent[0][0]
    end_trim = nonsilent[-1][1]
    return audio[start_trim:end_trim]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
def butter_bandpass(lowcut, highcut, fs, order=2):
    nyq = 0.5 * fs
    low = lowcut / nyq
    high = highcut / nyq
    b, a = butter(order, [low, high], btype='band')
    return b, a

def apply_equalizer(samples, fs, gains):
    # 5 —Å–º—É–≥: 60, 250, 1000, 4000, 16000 –ì—Ü
    bands = [(20, 120), (120, 500), (500, 2000), (2000, 8000), (8000, 20000)]
    out = np.zeros_like(samples)
    for i, (low, high) in enumerate(bands):
        b, a = butter_bandpass(low, high, fs)
        filtered = lfilter(b, a, samples)
        gain = 10 ** (gains[i] / 20)
        out += filtered * gain
    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –µ–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
    if np.max(np.abs(out)) > 0:
        out = out / np.max(np.abs(out)) * 0.95
    return out

def create_audio_plot(samples, fs, title="–ê—É–¥—ñ–æ —Å–∏–≥–Ω–∞–ª"):
    """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ –∞—É–¥—ñ–æ —Å–∏–≥–Ω–∞–ª—É"""
    duration = len(samples) / fs
    t = np.linspace(0, duration, len(samples))
    
    plt.figure(figsize=(12, 6))
    plt.plot(t, samples, 'b-', linewidth=0.5)
    plt.title(title)
    plt.xlabel('–ß–∞—Å (—Å–µ–∫—É–Ω–¥–∏)')
    plt.ylabel('–ê–º–ø–ª—ñ—Ç—É–¥–∞')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    plot_path = f"/tmp/{title.replace(' ', '_')}.png"
    plt.savefig(plot_path, dpi=150, bbox_inches='tight')
    plt.close()
    return plot_path

def main():
    print("üéµ –ê—É–¥—ñ–æ –†–µ–∫–æ—Ä–¥–µ—Ä —Ç–∞ –†–µ–¥–∞–∫—Ç–æ—Ä v1.0.4")
    print("=" * 50)
    print("üîß –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó v1.0.4:")
    print("   ‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–æ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–Ω—è")
    print("   ‚úÖ –î–æ–¥–∞–Ω–æ –∫–Ω–æ–ø–∫—É '–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑ EQ'")
    print("   ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É")
    print("   ‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤
    audio_files = []
    for ext in ['*.wav', '*.mp3', '*.flac', '*.ogg']:
        import glob
        audio_files.extend(glob.glob(ext))
    
    if not audio_files:
        print("üìÅ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤ —É –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
        print("üí° –î–æ–¥–∞–π—Ç–µ –∞—É–¥—ñ–æ —Ñ–∞–π–ª (WAV, MP3, FLAC, OGG) —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑–Ω–æ–≤—É")
        return
    
    print("üìÅ –ó–Ω–∞–π–¥–µ–Ω—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏:")
    for i, file in enumerate(audio_files, 1):
        print(f"  {i}. {file}")
    
    # –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É
    try:
        choice = int(input("\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Ñ–∞–π–ª—É: ")) - 1
        if choice < 0 or choice >= len(audio_files):
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä!")
            return
        selected_file = audio_files[choice]
    except ValueError:
        print("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä!")
        return
    
    print(f"\nüéµ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: {selected_file}")
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ
        audio = AudioSegment.from_file(selected_file)
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        print(f"   üìä –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {len(audio)/1000:.2f} —Å–µ–∫")
        print(f"   üîä –ß–∞—Å—Ç–æ—Ç–∞: {audio.frame_rate} –ì—Ü")
        print(f"   üéß –ö–∞–Ω–∞–ª–∏: {audio.channels}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –º–æ–Ω–æ
        if audio.channels == 2:
            audio = audio.set_channels(1)
            print("   üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ –º–æ–Ω–æ")
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑—Ä–∞–∑–∫—ñ–≤
        samples = np.array(audio.get_array_of_samples()).astype(np.float32)
        samples = samples / np.max(np.abs(samples))  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
        print("\nüìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥—ñ–æ...")
        original_plot = create_audio_plot(samples, audio.frame_rate, "–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∞—É–¥—ñ–æ")
        print(f"   üíæ –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {original_plot}")
        
        # –ú–µ–Ω—é –æ–±—Ä–æ–±–∫–∏
        while True:
            print("\nüîß –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:")
            print("  1. üßπ –û–±—Ä—ñ–∑–∫–∞ —Ç–∏—à—ñ")
            print("  2. üîá –í–∏–¥–∞–ª–µ–Ω–Ω—è —à—É–º—É (–ø–æ–∫—Ä–∞—â–µ–Ω–æ –≤ v1.0.4)")
            print("  3. üéõÔ∏è –ï–∫–≤–∞–ª–∞–π–∑–µ—Ä")
            print("  4. üìà –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è")
            print("  5. üîÑ –ü–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞")
            print("  6. üéõÔ∏è –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑ EQ (–Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è v1.0.4)")
            print("  7. üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫")
            print("  8. üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            print("  9. ‚ùå –í–∏—Ö—ñ–¥")
            
            try:
                choice = int(input("\n–í–∞—à –≤–∏–±—ñ—Ä: "))
            except ValueError:
                print("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä!")
                continue
            
            if choice == 1:  # –û–±—Ä—ñ–∑–∫–∞ —Ç–∏—à—ñ
                print("üßπ –û–±—Ä—ñ–∑–∫–∞ —Ç–∏—à—ñ...")
                trimmed = trim_silence(audio, silence_thresh=audio.dBFS-16, min_silence_len=100)
                samples = np.array(trimmed.get_array_of_samples()).astype(np.float32)
                samples = samples / np.max(np.abs(samples))
                print(f"   ‚úÖ –û–±—Ä—ñ–∑–∞–Ω–æ –¥–æ {len(trimmed)/1000:.2f} —Å–µ–∫")
                
            elif choice == 2:  # –í–∏–¥–∞–ª–µ–Ω–Ω—è —à—É–º—É (–ø–æ–∫—Ä–∞—â–µ–Ω–æ)
                print("üîá –í–∏–¥–∞–ª–µ–Ω–Ω—è —à—É–º—É (–ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º v1.0.4)...")
                reduced = nr.reduce_noise(y=samples, sr=audio.frame_rate)
                samples = reduced
                print("   ‚úÖ –®—É–º –≤–∏–¥–∞–ª–µ–Ω–æ (–ø–æ–∫—Ä–∞—â–µ–Ω–æ –≤ v1.0.4)")
                
            elif choice == 3:  # –ï–∫–≤–∞–ª–∞–π–∑–µ—Ä
                print("üéõÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞:")
                gains = []
                freqs = [60, 250, 1000, 4000, 16000]
                for freq in freqs:
                    try:
                        gain = float(input(f"   {freq} –ì—Ü (-12 –¥–æ +12 –¥–ë): "))
                        gains.append(max(-12, min(12, gain)))
                    except ValueError:
                        gains.append(0)
                
                print("   üéõÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞...")
                samples = apply_equalizer(samples, audio.frame_rate, gains)
                print("   ‚úÖ –ï–∫–≤–∞–ª–∞–π–∑–µ—Ä –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ")
                
            elif choice == 4:  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
                print("üìà –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è...")
                audio_segment = AudioSegment(
                    (samples * 32767).astype(np.int16).tobytes(),
                    frame_rate=audio.frame_rate,
                    sample_width=2,
                    channels=1
                )
                normalized = effects.normalize(audio_segment)
                samples = np.array(normalized.get_array_of_samples()).astype(np.float32)
                samples = samples / np.max(np.abs(samples))
                print("   ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
            elif choice == 5:  # –ü–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞
                print("üîÑ –ü–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ...")
                
                # 1. –û–±—Ä—ñ–∑–∫–∞ —Ç–∏—à—ñ
                print("   üßπ –û–±—Ä—ñ–∑–∫–∞ —Ç–∏—à—ñ...")
                trimmed = trim_silence(audio, silence_thresh=audio.dBFS-16, min_silence_len=100)
                proc_samples = np.array(trimmed.get_array_of_samples()).astype(np.float32)
                proc_samples = proc_samples / np.max(np.abs(proc_samples))
                
                # 2. –í–∏–¥–∞–ª–µ–Ω–Ω—è —à—É–º—É (–ø–æ–∫—Ä–∞—â–µ–Ω–æ)
                print("   üîá –í–∏–¥–∞–ª–µ–Ω–Ω—è —à—É–º—É (–ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º v1.0.4)...")
                reduced = nr.reduce_noise(y=proc_samples, sr=audio.frame_rate)
                
                # 3. –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
                print("   üìà –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è...")
                normed = effects.normalize(AudioSegment(
                    (reduced * 32767).astype(np.int16).tobytes(),
                    frame_rate=audio.frame_rate,
                    sample_width=2,
                    channels=1
                ))
                
                # 4. –ï–∫–≤–∞–ª–∞–π–∑–µ—Ä (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
                print("   üéõÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞...")
                eq_samples = np.array(normed.get_array_of_samples()).astype(np.float32)
                eq_samples = eq_samples / np.max(np.abs(eq_samples))
                eq_samples = apply_equalizer(eq_samples, audio.frame_rate, [0, 0, 0, 0, 0])
                
                samples = eq_samples
                print("   ‚úÖ –ü–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
            elif choice == 6:  # –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑ EQ (–Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
                print("üéõÔ∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –µ–∫–≤–∞–ª–∞–π–∑–µ—Ä–æ–º (–Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è v1.0.4)...")
                print("   –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞:")
                gains = []
                freqs = [60, 250, 1000, 4000, 16000]
                for freq in freqs:
                    try:
                        gain = float(input(f"   {freq} –ì—Ü (-12 –¥–æ +12 –¥–ë): "))
                        gains.append(max(-12, min(12, gain)))
                    except ValueError:
                        gains.append(0)
                
                # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
                eq_samples = apply_equalizer(samples, audio.frame_rate, gains)
                
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
                output_name = f"eq_preview_{selected_file}"
                audio_segment = AudioSegment(
                    (eq_samples * 32767).astype(np.int16).tobytes(),
                    frame_rate=audio.frame_rate,
                    sample_width=2,
                    channels=1
                )
                audio_segment.export(output_name, format=output_name.split('.')[-1])
                print(f"   ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: {output_name}")
                print("   üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –ø—Ä–æ–≥—Ä–∞–≤–∞—á –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è")
                
            elif choice == 7:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫
                print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞...")
                plot_path = create_audio_plot(samples, audio.frame_rate, "–û–±—Ä–æ–±–ª–µ–Ω–µ –∞—É–¥—ñ–æ")
                print(f"   üíæ –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {plot_path}")
                
            elif choice == 8:  # –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É...")
                output_name = f"processed_{selected_file}"
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –∞—É–¥—ñ–æ —Å–µ–≥–º–µ–Ω—Ç
                audio_segment = AudioSegment(
                    (samples * 32767).astype(np.int16).tobytes(),
                    frame_rate=audio.frame_rate,
                    sample_width=2,
                    channels=1
                )
                
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                audio_segment.export(output_name, format=output_name.split('.')[-1])
                print(f"   ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫: {output_name}")
                
            elif choice == 9:  # –í–∏—Ö—ñ–¥
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
                
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä!")
    
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —Ç–∞ –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π")

if __name__ == "__main__":
    main()
